// JAVA/SCALA/ETC
buildscript {
    repositories {
        jcenter()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.2-SNAPSHOT'
    }
}
// NATIVES
apply plugin: 'cpp'

binaries.all {
    if (toolChain in Gcc || toolChain in Clang) {
        if (buildType == buildTypes.release) {
            cppCompiler.define "NDEBUG"
        }
        cppCompiler.define "_REENTRANT"
//        cppCompiler.define "LUA_USE_LINUX"
        if (buildType == buildTypes.debug) {
            cppCompiler.args "-g", "-fno-strict-aliasing"
        } else {
            cppCompiler.args "-O2", "-fno-strict-aliasing"
            linker.args "-s"
        }
        tasks.withType(LinkSharedLibrary) {
            tasks.withType(CppCompile) {
                includes.from("src/main/headers")
                includes.from("/usr/lib/jvm/java-8-openjdk/include")
                includes.from("/usr/lib/jvm/java-8-openjdk/include/linux")
                includes.from("/usr/lib/jvm/java-8-openjdk-amd64/include")
                includes.from("/usr/lib/jvm/java-8-openjdk-amd64/include/linux")
                includes.from("/usr/local/openjdk8/include")
                includes.from("/usr/local/openjdk8/include/freebsd")
                includes.from("/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/include")
                includes.from("/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/include/darwin")
            }
        }
    }
    if (toolChain in VisualCpp) {
        if (buildType == buildTypes.debug) {
            cppCompiler.args "/Od", "/Zi", "/MTd"
            linker.args "/debug"
        } else {
            cppCompiler.args "/O2", "/MT"
        }
        tasks.withType(LinkSharedLibrary) {
            tasks.withType(CppCompile) {
                includes.from("src/main/headers")
                includes.from("C:/Program Files (x86)/Java/jdk1.7.0_55/include")
                includes.from("C:/Program Files (x86)/Java/jdk1.7.0_55/include/win32")
            }
            if (targetPlatform == platforms.x86) {
                libs += files("C:/Program Files (x86)/Microsoft SDKs/Windows/v7.1A/Lib/uuid.lib", "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.1A/Lib/kernel32.lib")
            }
            if (targetPlatform == platforms.x64) {
                libs += files("C:/Program Files (x86)/Microsoft SDKs/Windows/v7.1A/Lib/x64/uuid.lib", "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.1A/Lib/x64/kernel32.lib")
            }
        }
    }
    tasks.withType(CppCompile) {
        positionIndependentCode = true
    }
}

model {
    components {
        ocjs(NativeLibrarySpec) {
//            targetPlatform "x86"
            targetPlatform "x64"
//            targetPlatform "arm"
            sources {
                cpp {
                    source {
                        srcDir "src/main/cpp"
                        include "**/*.cpp"
                        include "**/*.c"
                    }
                }
            }
        }
    }
    buildTypes {
        debug
        release
    }
    platforms {
//        x86 { architecture "x86" }
        x64 { architecture "x86_64" }
        //TODO: ARM
//        arm { architecture "arm" }
    }
    toolChains {
        gcc(Gcc) {
//            linker.executable = 'g++'
//            target('arm') {
//                linker.executable = 'arm-unknown-linux-gnueabi-g++'
//                cppCompiler.executable = 'arm-unknown-linux-gnueabi-g++'
//        }
        }
        clang(Clang)
        visualCpp(VisualCpp)
    }
}

//MC
apply plugin: 'scala'
apply plugin: 'net.minecraftforge.gradle.forge'
version = "1.0"
group = "com.pwootage.oc.js"
archivesBaseName = "oc-js"

minecraft {
    version = "1.10.2-12.18.3.2221"
    runDir = "run"

    // the mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   snapshot are built nightly.
    // stable_#            stables are built at the discretion of the MCP team.
    mappings = "snapshot_20160720"
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.

    replaceIn "com/pwootage/oc/nashorn/OCNASHORN.scala"
    replace "@VERSION@", project.version
}

repositories {
    maven { url = "http://maven.cil.li/" }
}

dependencies {
    compile "li.cil.oc:OpenComputers:MC1.10-1.6.+:api"
    compile group: 'org.scala-lang', name: 'scala-library', version: '2.11.11'
}

task grunt(type: Exec) {
    executable "grunt"

    //Dirty hack because osx/intellij path -.-
    if (System.getProperty("os.name").toLowerCase().contains("mac")) {
        if (!System.getenv("PATH").contains("/usr/local/bin")) {
            executable "/usr/local/bin/node"
            args "/usr/local/bin/grunt"
        }
    }

    args "default"
}

processResources.dependsOn('grunt')

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

        expand 'version': project.version, 'mcversion': project.minecraft.version
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

task javah(type: Exec) {
    executable "javah"

    def classpath = sourceSets.main.output.classesDir
    args "-classpath", classpath,
            "-d", "src/main/headers",
            "com.pwootage.oc.js.DuktapeEngine"

    dependsOn classes
}